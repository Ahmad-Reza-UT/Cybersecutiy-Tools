'''                                         '''

    ########################################
    #    Port and Vulnerability Scanning   #
    #       Ahmad Reza Parsi Zadeh         #
    #        github: ahmad-reza-ut         #
    ########################################
'''                                         '''
'''
            Important Notes:
    In this script we have two type of scanners
    
    1. Basic Port and Vulnerability Scanner
    2. Advanced Port and Vulnerability Scanner
    
So I've determined at the beginning of each one the type of them
    and you can use each one of them by commenting the other
    
If you want to run this code in linux use this command at the beginning :
#!/usr/bin/python
'''
# ------------- Basic Port and Vulnerability Scanner -------------#
from Imports import *
#--------------------------------------------------#
# Instantiating and Setting initialized datas
SOCKET = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
socket.setdefaulttimeout(1)

#--------------------------------------------------#
def Basic_Port_Vuln_Scanner():
    HOST = input("Enter the HOST to scan: ")
    choice = int(input("Select: 1. Scan all ports ****** 2. Scan first n ports: "))
    PORTS_NUM = int(input("Enter your intended number of ports: ")) if choice == 2 else 65535

    for port in range(0, PORTS_NUM):
        if SOCKET.connect_ex((HOST, port)):
            print(colored("[!!] Port %d is closed." % (port), 'red'))
        else:
            print(colored("[+] Port %d in open." % (port), 'green'))

#--------------------------------------------------#
if __name__ == '__main__':
    Basic_Port_Vuln_Scanner()
#-------------------- End -------------------------#




# ------------- Advanced Port and Vulnerability Scanner -------------#
def connScan(tgtHost, tgtPort):
    try:
        SOCKET = socket(AF_INET, SOCK_STREAM)
        SOCKET.connect((tgtHost, tgtPort))
        print(colored("[+] Port %d in open." % (tgtPort), 'green'))
    except:
        print(colored("[-] Port %d is closed." % (tgtPort), 'red'))
    finally:
        SOCKET.close()
#--------------------------------------------------#
def Port_Scan(tgtHost, tgtPorts):
    try:
        tgtIP = gethostbyname(tgtHost)
    except:
        print('Unknown Host %s' %tgtHost)

    try:
        tgtName = gethostbyaddr(tgtIP)
        print('[+] Scan results for: ' + tgtName[0])
    except:
        print('[+] Scan results for: ' + tgtIP)
    setdefaulttimeout(1)
    for tgtPort in tgtPorts:
        t = Thread(target = connScan, args = (tgtHost, int(tgtPort)))
        t.start()
#--------------------------------------------------#
def Advanced_Port_Vuln_Scanner():
    parser = optparse.OptionParser('Usage of program: ' + '-H <Target Host> -p <Target Ports>')
    parser.add_option('-H', dest = 'tgtHost', type = 'string', help = 'specify target host')
    parser.add_option('-H', dest='tgtPort', type='string', help='specify target ports separated by comma')
    (options, args) = parser.parse_args()
    tgtHost = options.tgtHost
    tgtPorts = str(options.tgtPort).split(',')
    if (tgtHost == None) | (tgtPorts[0] == None):
        print(parser.usage)
        exit(0)

    Port_Scan(tgtHost, tgtPorts)
#--------------------------------------------------#
if __name__ == '__main__':
    Advanced_Port_Vuln_Scanner()

#-------------------- End -------------------------#